'use strict';

var __chunk_2 = require('./chunk-8b323fa8.js');

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = __chunk_2.noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (__chunk_2.safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = __chunk_2.noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || __chunk_2.noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const CONTEXT_KEY = {};

const preload = () => ({});

/* src/routes/_components/Nav.svelte generated by Svelte v3.12.1 */

const Nav = __chunk_2.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $page, $session;

	const { page, session } = stores$1(); __chunk_2.validate_store(page, 'page'); $page = __chunk_2.get_store_value(page); __chunk_2.validate_store(session, 'session'); $session = __chunk_2.get_store_value(session);

	__chunk_2.validate_store(page, 'page'); $page = __chunk_2.get_store_value(page);
	__chunk_2.validate_store(session, 'session'); $session = __chunk_2.get_store_value(session);

	return `<nav class="navbar navbar-light">
		<div class="container">
			<a rel="prefetch" class="navbar-brand" href=".">conduit</a>
			<ul class="nav navbar-nav pull-xs-right">
				<li class="nav-item">
					<a rel="prefetch" class="${[`nav-link`, $page.path === '/' ? "active" : ""].join(' ').trim() }" href="/">Home</a>
				</li>

				${ $session.user ? `<li class="nav-item">
						<a rel="prefetch" href="/editor" class="${[`nav-link`, $page.path === '/editor' ? "active" : ""].join(' ').trim() }">
							<i class="ion-compose"></i> New Post
						</a>
					</li>

					<li class="nav-item">
						<a rel="prefetch" href="/settings" class="${[`nav-link`, $page.path === '/settings' ? "active" : ""].join(' ').trim() }">
							<i class="ion-gear-a"></i> Settings
						</a>
					</li>

					<li class="nav-item">
						<a rel="prefetch" href="/profile/@${__chunk_2.escape($session.user.username)}" class="nav-link">

							${__chunk_2.escape($session.user.username)}
						</a>
					</li>` : `<li class="nav-item">
						<a rel="prefetch" href="/login" class="${[`nav-link`, $page.path === '/login' ? "active" : ""].join(' ').trim() }">
							Sign in
						</a>
					</li>

					<li class="nav-item">
						<a rel="prefetch" href="/register" class="${[`nav-link`, $page.path === '/register' ? "active" : ""].join(' ').trim() }">
							Sign up
						</a>
					</li>` }
			</ul>
		</div>
	</nav>`;
});

/* src/routes/_layout.svelte generated by Svelte v3.12.1 */

const Layout = __chunk_2.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

	let { segment } = $$props;

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	return `${__chunk_2.validate_component(Nav, 'Nav').$$render($$result, { segment: segment }, {}, {})}

	<main>
		${$$slots.default ? $$slots.default({}) : ``}
	</main>`;
});

/* src/routes/_error.svelte generated by Svelte v3.12.1 */

const css = {
	code: "h1.svelte-8lferx,p.svelte-8lferx{margin:0 auto}h1.svelte-8lferx{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8lferx{margin:1em auto}@media(min-width: 480px){h1.svelte-8lferx{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let error, status;\\n\\n\\tlet dev = \\\"development\\\" === \\\"development\\\";\\n</script>\\n\\n<svelte:head>\\n\\t<title>{status}</title>\\n</svelte:head>\\n\\n<h1>{status}</h1>\\n\\n<p>{error.message}</p>\\n\\n{#if dev && error.stack}\\n\\t<pre>{error.stack}</pre>\\n{/if}\\n\\n<style>\\n\\th1,\\n\\tp {\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\th1 {\\n\\t\\tfont-size: 2.8em;\\n\\t\\tfont-weight: 700;\\n\\t\\tmargin: 0 0 0.5em 0;\\n\\t}\\n\\n\\tp {\\n\\t\\tmargin: 1em auto;\\n\\t}\\n\\n\\t@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t}\\n</style>\"],\"names\":[],\"mappings\":\"AAmBC,gBAAE,CACF,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,AACf,CAAC,AACF,CAAC\"}"
};

const Error$1 = __chunk_2.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { error, status } = $$props;

	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);

	$$result.css.add(css);

	return `${($$result.head += `<title>${__chunk_2.escape(status)}</title>`, "")}

	<h1 class="svelte-8lferx">${__chunk_2.escape(status)}</h1>

	<p class="svelte-8lferx">${__chunk_2.escape(error.message)}</p>

	${ error.stack ? `<pre>${__chunk_2.escape(error.stack)}</pre>` : `` }`;
});

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.12.1 */

const App = __chunk_2.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

	let { stores, error, status, segments, level0, level1 = null } = $$props;

	__chunk_2.setContext(CONTEXT_KEY, stores);

	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);

	return `


	${__chunk_2.validate_component(Layout, 'Layout').$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `
		${ error ? `${__chunk_2.validate_component(Error$1, 'Error').$$render($$result, { error: error, status: status }, {}, {})}` : `${__chunk_2.validate_component(((level1.component) || __chunk_2.missing_component), 'svelte:component').$$render($$result, Object.assign(level1.props), {}, {})}` }
	`
	})}`;
});

// This file is generated by Sapper — do not edit it!

const ignore = [/^\/auth\/register\/?$/, /^\/auth\/logout\/?$/, /^\/auth\/login\/?$/, /^\/auth\/save\/?$/, /^\/auth\/user\/?$/];

const components = [
	{
		js: () => Promise.resolve(require('./index-b474d2ca.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-5b6ba81d.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:register/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-bca5d0b9.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:settings/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./[slug]-a50e24f9.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:article/[slug].svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-ced04d4f.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:profile/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-c5a24fc3.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:profile/[user]/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./[view]-357bd919.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:profile/[user]/[view].svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-e2e49fce.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:editor/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./[slug]-e656d6c8.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:editor/[slug].svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-2f256032.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:login/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./[p]-d9ac9d81.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:[p].svelte__"
	}
];

const routes = (d => [
	{
		// index.svelte
		pattern: /^\/$/,
		parts: [
			{ i: 0 }
		]
	},

	{
		// register/index.svelte
		pattern: /^\/register\/?$/,
		parts: [
			{ i: 1 }
		]
	},

	{
		// settings/index.svelte
		pattern: /^\/settings\/?$/,
		parts: [
			{ i: 2 }
		]
	},

	{
		// article/[slug].svelte
		pattern: /^\/article\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 3, params: match => ({ slug: d(match[1]) }) }
		]
	},

	{
		// profile/index.svelte
		pattern: /^\/profile\/?$/,
		parts: [
			{ i: 4 }
		]
	},

	{
		// profile/[user]/index.svelte
		pattern: /^\/profile\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 5, params: match => ({ user: d(match[1]) }) }
		]
	},

	{
		// profile/[user]/[view].svelte
		pattern: /^\/profile\/([^\/]+?)\/([^\/]+?)\/?$/,
		parts: [
			null,
			null,
			{ i: 6, params: match => ({ user: d(match[1]), view: d(match[2]) }) }
		]
	},

	{
		// editor/index.svelte
		pattern: /^\/editor\/?$/,
		parts: [
			{ i: 7 }
		]
	},

	{
		// editor/[slug].svelte
		pattern: /^\/editor\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 8, params: match => ({ slug: d(match[1]) }) }
		]
	},

	{
		// login/index.svelte
		pattern: /^\/login\/?$/,
		parts: [
			{ i: 9 }
		]
	},

	{
		// [p].svelte
		pattern: /^\/([^\/]+?)\/?$/,
		parts: [
			{ i: 10, params: match => ({ p: d(match[1]) }) }
		]
	}
])(decodeURIComponent);

if (typeof window !== 'undefined') {
	Promise.resolve(require('./sapper-dev-client-39a0eff9.js')).then(client => {
		client.connect(10000);
	});
}

function goto(href, opts = { replaceState: false }) {
	const target = select_target(new URL(href, document.baseURI));

	if (target) {
		_history[opts.replaceState ? 'replaceState' : 'pushState']({ id: cid }, '', href);
		return navigate(target, null).then(() => {});
	}

	location.href = href;
	return new Promise(f => {}); // never resolves
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;

let ready = false;
let root_component;
let current_token;
let root_preloaded;
let current_branch = [];
let current_query = '{}';

const stores = {
	page: writable({}),
	preloading: writable(null),
	session: writable(initial_data && initial_data.session)
};

let $session;
let session_dirty;

stores.session.subscribe(async value => {
	$session = value;

	if (!ready) return;
	session_dirty = true;

	const target = select_target(new URL(location.href));

	const token = current_token = {};
	const { redirect, props, branch } = await hydrate_target(target);
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
});

let prefetching


 = null;

let target;

let uid = 1;

let cid;

const _history = typeof history !== 'undefined' ? history : {
	pushState: (state, title, href) => {},
	replaceState: (state, title, href) => {},
	scrollRestoration: ''
};

const scroll_history = {};

function extract_query(search) {
	const query = Object.create(null);
	if (search.length > 0) {
		search.slice(1).split('&').forEach(searchParam => {
			let [, key, value = ''] = /([^=]*)(?:=(.*))?/.exec(decodeURIComponent(searchParam.replace(/\+/g, ' ')));
			if (typeof query[key] === 'string') query[key] = [query[key]];
			if (typeof query[key] === 'object') (query[key] ).push(value);
			else query[key] = value;
		});
	}
	return query;
}

function select_target(url) {
	if (url.origin !== location.origin) return null;
	if (!url.pathname.startsWith(initial_data.baseUrl)) return null;

	let path = url.pathname.slice(initial_data.baseUrl.length);

	if (path === '') {
		path = '/';
	}

	// avoid accidental clashes between server routes and page routes
	if (ignore.some(pattern => pattern.test(path))) return;

	for (let i = 0; i < routes.length; i += 1) {
		const route = routes[i];

		const match = route.pattern.exec(path);

		if (match) {
			const query = extract_query(url.search);
			const part = route.parts[route.parts.length - 1];
			const params = part.params ? part.params(match) : {};

			const page = { host: location.host, path, query, params };

			return { href: url.href, route, match, page };
		}
	}
}

function scroll_state() {
	return {
		x: pageXOffset,
		y: pageYOffset
	};
}

async function navigate(target, id, noscroll, hash) {
	if (id) {
		// popstate or initial navigation
		cid = id;
	} else {
		const current_scroll = scroll_state();

		// clicked on a link. preserve scroll state
		scroll_history[cid] = current_scroll;

		id = cid = ++uid;
		scroll_history[cid] = noscroll ? current_scroll : { x: 0, y: 0 };
	}

	cid = id;

	if (root_component) stores.preloading.set(true);

	const loaded = prefetching && prefetching.href === target.href ?
		prefetching.promise :
		hydrate_target(target);

	prefetching = null;

	const token = current_token = {};
	const { redirect, props, branch } = await loaded;
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
	if (document.activeElement) document.activeElement.blur();

	if (!noscroll) {
		let scroll = scroll_history[id];

		if (hash) {
			// scroll is an element id (from a hash), we need to compute y.
			const deep_linked = document.getElementById(hash.slice(1));

			if (deep_linked) {
				scroll = {
					x: 0,
					y: deep_linked.getBoundingClientRect().top
				};
			}
		}

		scroll_history[cid] = scroll;
		if (scroll) scrollTo(scroll.x, scroll.y);
	}
}

async function render(redirect, branch, props, page) {
	if (redirect) return goto(redirect.location, { replaceState: true });

	stores.page.set(page);
	stores.preloading.set(false);

	if (root_component) {
		root_component.$set(props);
	} else {
		props.stores = {
			page: { subscribe: stores.page.subscribe },
			preloading: { subscribe: stores.preloading.subscribe },
			session: stores.session
		};
		props.level0 = {
			props: await root_preloaded
		};

		// first load — remove SSR'd <head> contents
		const start = document.querySelector('#sapper-head-start');
		const end = document.querySelector('#sapper-head-end');

		if (start && end) {
			while (start.nextSibling !== end) detach(start.nextSibling);
			detach(start);
			detach(end);
		}

		root_component = new App({
			target,
			props,
			hydrate: true
		});
	}

	current_branch = branch;
	current_query = JSON.stringify(page.query);
	ready = true;
	session_dirty = false;
}

function part_changed(i, segment, match, stringified_query) {
	// TODO only check query string changes for preload functions
	// that do in fact depend on it (using static analysis or
	// runtime instrumentation)
	if (stringified_query !== current_query) return true;

	const previous = current_branch[i];

	if (!previous) return false;
	if (segment !== previous.segment) return true;
	if (previous.match) {
		if (JSON.stringify(previous.match.slice(1, i + 2)) !== JSON.stringify(match.slice(1, i + 2))) {
			return true;
		}
	}
}

async function hydrate_target(target)



 {
	const { route, page } = target;
	const segments = page.path.split('/').filter(Boolean);

	let redirect = null;

	const props = { error: null, status: 200, segments: [segments[0]] };

	const preload_context = {
		fetch: (url, opts) => fetch(url, opts),
		redirect: (statusCode, location) => {
			if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
				throw new Error(`Conflicting redirects`);
			}
			redirect = { statusCode, location };
		},
		error: (status, error) => {
			props.error = typeof error === 'string' ? new Error(error) : error;
			props.status = status;
		}
	};

	if (!root_preloaded) {
		root_preloaded = initial_data.preloaded[0] || preload.call(preload_context, {
			host: page.host,
			path: page.path,
			query: page.query,
			params: {}
		}, $session);
	}

	let branch;
	let l = 1;

	try {
		const stringified_query = JSON.stringify(page.query);
		const match = route.pattern.exec(page.path);

		let segment_dirty = false;

		branch = await Promise.all(route.parts.map(async (part, i) => {
			const segment = segments[i];

			if (part_changed(i, segment, match, stringified_query)) segment_dirty = true;

			props.segments[l] = segments[i + 1]; // TODO make this less confusing
			if (!part) return { segment };

			const j = l++;

			if (!session_dirty && !segment_dirty && current_branch[i] && current_branch[i].part === part.i) {
				return current_branch[i];
			}

			segment_dirty = false;

			const { default: component, preload } = await load_component(components[part.i]);

			let preloaded;
			if (ready || !initial_data.preloaded[i + 1]) {
				preloaded = preload
					? await preload.call(preload_context, {
						host: page.host,
						path: page.path,
						query: page.query,
						params: part.params ? part.params(target.match) : {}
					}, $session)
					: {};
			} else {
				preloaded = initial_data.preloaded[i + 1];
			}

			return (props[`level${j}`] = { component, props: preloaded, segment, match, part: part.i });
		}));
	} catch (error) {
		props.error = error;
		props.status = 500;
		branch = [];
	}

	return { redirect, props, branch };
}

function load_css(chunk) {
	const href = `client/${chunk}`;
	if (document.querySelector(`link[href="${href}"]`)) return;

	return new Promise((fulfil, reject) => {
		const link = document.createElement('link');
		link.rel = 'stylesheet';
		link.href = href;

		link.onload = () => fulfil();
		link.onerror = reject;

		document.head.appendChild(link);
	});
}

function load_component(component)


 {
	// TODO this is temporary — once placeholders are
	// always rewritten, scratch the ternary
	const promises = (typeof component.css === 'string' ? [] : component.css.map(load_css));
	promises.unshift(component.js());
	return Promise.all(promises).then(values => values[0]);
}

function detach(node) {
	node.parentNode.removeChild(node);
}

const stores$1 = () => __chunk_2.getContext(CONTEXT_KEY);

exports.App = App;
exports.error = Error$1;
exports.root = Layout;
exports.stores$1 = stores$1;
exports.writable = writable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
