(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1579245865614;

	const files = [
		"service-worker-index.html",
		"favicon.ico",
		"manifest.json",
		"svelte-logo-192.png",
		"svelte-logo-512.png"
	];

	const shell = [
		"client/chunk.6414288c.js",
		"client/chunk.78ecd290.js",
		"client/client.055b5ec7.js",
		"client/chunk.11f50e20.js",
		"client/chunk.52b8b945.js",
		"client/chunk.a71e0b0a.js",
		"client/index.09258068.js",
		"client/chunk.9e3350ae.js",
		"client/chunk.57407f11.js",
		"client/index.1446f336.js",
		"client/index.bf204421.js",
		"client/[slug].32212a8b.js",
		"client/index.e5cd9cf8.js",
		"client/chunk.40fe0b6c.js",
		"client/index.e7a4634c.js",
		"client/[view].e0dbd4b4.js",
		"client/chunk.7ea8199f.js",
		"client/index.33dbaedb.js",
		"client/[slug].61f9fe76.js",
		"client/index.12fc50fc.js",
		"client/[p].80408eec.js",
		"client/sapper-dev-client.66640646.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch (err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
