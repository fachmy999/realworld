import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_store, c as component_subscribe, a as space, j as claim_space, o as insert_dev, u as mount_component, y as transition_in, z as transition_out, h as detach_dev, A as destroy_component } from './chunk.6414288c.js';
import { a as stores$1 } from './chunk.78ecd290.js';
import { g as get } from './chunk.11f50e20.js';
import './chunk.52b8b945.js';
import { P as Profile } from './chunk.40fe0b6c.js';

/* src/routes/profile/[user]/index.svelte generated by Svelte v3.12.1 */

function create_fragment(ctx) {
	var title_value, t, current;

	document.title = title_value = "" + ctx.profile.username + " • Conduit";

	var profile_1 = new Profile({
		props: {
		profile: ctx.profile,
		favorites: ctx.favorites,
		user: ctx.$session.user
	},
		$$inline: true
	});

	const block = {
		c: function create() {
			t = space();
			profile_1.$$.fragment.c();
		},

		l: function claim(nodes) {
			t = claim_space(nodes);
			profile_1.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			mount_component(profile_1, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.profile) && title_value !== (title_value = "" + ctx.profile.username + " • Conduit")) {
				document.title = title_value;
			}

			var profile_1_changes = {};
			if (changed.profile) profile_1_changes.profile = ctx.profile;
			if (changed.favorites) profile_1_changes.favorites = ctx.favorites;
			if (changed.$session) profile_1_changes.user = ctx.$session.user;
			profile_1.$set(profile_1_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(profile_1.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(profile_1.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t);
			}

			destroy_component(profile_1, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

async function preload({ params }, { user }) {
	const username = params.user.slice(1);

	const { profile } = await get(`profiles/${username}`, user && user.token);
	return { profile, favorites: params.view === 'favorites' };
}

function instance($$self, $$props, $$invalidate) {
	let $session;

	

	let { profile, favorites } = $$props;

	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	const writable_props = ['profile', 'favorites'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('profile' in $$props) $$invalidate('profile', profile = $$props.profile);
		if ('favorites' in $$props) $$invalidate('favorites', favorites = $$props.favorites);
	};

	$$self.$capture_state = () => {
		return { profile, favorites, $session };
	};

	$$self.$inject_state = $$props => {
		if ('profile' in $$props) $$invalidate('profile', profile = $$props.profile);
		if ('favorites' in $$props) $$invalidate('favorites', favorites = $$props.favorites);
		if ('$session' in $$props) session.set($session);
	};

	return { profile, favorites, session, $session };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["profile", "favorites"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.profile === undefined && !('profile' in props)) {
			console.warn("<Index> was created without expected prop 'profile'");
		}
		if (ctx.favorites === undefined && !('favorites' in props)) {
			console.warn("<Index> was created without expected prop 'favorites'");
		}
	}

	get profile() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set profile(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get favorites() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set favorites(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZTdhNDYzNGMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcHJvZmlsZS9bdXNlcl0vaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRpbXBvcnQgKiBhcyBhcGkgZnJvbSAnYXBpLmpzJztcblxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcyB9LCB7IHVzZXIgfSkge1xuXHRcdGNvbnN0IHVzZXJuYW1lID0gcGFyYW1zLnVzZXIuc2xpY2UoMSk7XG5cblx0XHRjb25zdCB7IHByb2ZpbGUgfSA9IGF3YWl0IGFwaS5nZXQoYHByb2ZpbGVzLyR7dXNlcm5hbWV9YCwgdXNlciAmJiB1c2VyLnRva2VuKTtcblx0XHRyZXR1cm4geyBwcm9maWxlLCBmYXZvcml0ZXM6IHBhcmFtcy52aWV3ID09PSAnZmF2b3JpdGVzJyB9O1xuXHR9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cblx0aW1wb3J0IHsgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnO1xuXHRpbXBvcnQgUHJvZmlsZSBmcm9tICcuL19Qcm9maWxlLnN2ZWx0ZSc7XG5cblx0ZXhwb3J0IGxldCBwcm9maWxlO1xuXHRleHBvcnQgbGV0IGZhdm9yaXRlcztcblxuXHRjb25zdCB7IHNlc3Npb24gfSA9IHN0b3JlcygpO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPntwcm9maWxlLnVzZXJuYW1lfSDigKIgQ29uZHVpdDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48UHJvZmlsZSB7cHJvZmlsZX0ge2Zhdm9yaXRlc30gdXNlcj17JHNlc3Npb24udXNlcn0vPiJdLCJuYW1lcyI6WyJhcGkuZ2V0Iiwic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozt5Q0FzQlMsT0FBTyxDQUFDLFFBQVE7Ozs7ZUFHZixPQUFPO2lCQUFHLFNBQVM7WUFBUSxRQUFRLENBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0ZBSHpDLE9BQU8sQ0FBQyxRQUFROzs7Ozt3REFHZixPQUFPOzREQUFHLFNBQVM7c0RBQVEsUUFBUSxDQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF0QjFDLGVBQWUsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtDQUNuRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Q0FFdEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU1BLEdBQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDOUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUUsQ0FBQztDQUMzRDs7Ozs7OztDQU9NLE1BQUksT0FBTyxFQUNQLHFCQUFTLENBQUM7O0NBRXJCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBR0MsUUFBTSxvSkFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
