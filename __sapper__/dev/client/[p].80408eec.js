import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, u as mount_component, y as transition_in, z as transition_out, A as destroy_component } from './chunk.6414288c.js';
import './chunk.78ecd290.js';
import './chunk.11f50e20.js';
import './chunk.52b8b945.js';
import { H as Home } from './chunk.a71e0b0a.js';

/* src/routes/[p].svelte generated by Svelte v3.12.1 */

function create_fragment(ctx) {
	var current;

	var home = new Home({
		props: { p: ctx.p },
		$$inline: true
	});

	const block = {
		c: function create() {
			home.$$.fragment.c();
		},

		l: function claim(nodes) {
			home.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(home, target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var home_changes = {};
			if (changed.p) home_changes.p = ctx.p;
			home.$set(home_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(home.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(home.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(home, detaching);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function preload({ params }) {
	return {
		p: +params.p
	};
}

function instance($$self, $$props, $$invalidate) {
	let { p } = $$props;

	const writable_props = ['p'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<P> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('p' in $$props) $$invalidate('p', p = $$props.p);
	};

	$$self.$capture_state = () => {
		return { p };
	};

	$$self.$inject_state = $$props => {
		if ('p' in $$props) $$invalidate('p', p = $$props.p);
	};

	return { p };
}

class P extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["p"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "P", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.p === undefined && !('p' in props)) {
			console.warn("<P> was created without expected prop 'p'");
		}
	}

	get p() {
		throw new Error("<P>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set p(value) {
		throw new Error("<P>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default P;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3BdLjgwNDA4ZWVjLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL1twXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zIH0pIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cDogK3BhcmFtcy5wXG5cdFx0fTtcblx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGltcG9ydCBIb21lIGZyb20gJy4vX2NvbXBvbmVudHMvSG9tZS5zdmVsdGUnO1xuXHRleHBvcnQgbGV0IHA7XG48L3NjcmlwdD5cblxuPEhvbWUge3B9Lz4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2tCQWFPLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VDQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVpBLFNBQVMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7Q0FDbkMsT0FBTztFQUNOLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ1osQ0FBQztDQUNGOzs7Q0FLTSxNQUFJLGFBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
