import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, e as element, a as space, t as text, b as claim_element, f as children, h as detach_dev, j as claim_space, g as claim_text, k as attr_dev, l as add_location, K as listen_dev, U as prevent_default, o as insert_dev, p as append_dev, V as set_input_value, Y as prop_dev, n as noop, W as run_all, O as createEventDispatcher, D as assign, v as validate_store, c as component_subscribe, u as mount_component, F as get_spread_update, G as get_spread_object, y as transition_in, z as transition_out, A as destroy_component, X as set_store_value } from './chunk.6414288c.js';
import { a as stores$1, g as goto } from './chunk.78ecd290.js';
import { L as ListErrors } from './chunk.9e3350ae.js';
import { p as post } from './chunk.57407f11.js';

/* src/routes/settings/_SettingsForm.svelte generated by Svelte v3.12.1 */

const file = "src/routes/settings/_SettingsForm.svelte";

function create_fragment(ctx) {
	var form, fieldset5, fieldset0, input0, t0, fieldset1, input1, t1, fieldset2, textarea, t2, fieldset3, input2, t3, fieldset4, input3, t4, button, t5, dispose;

	const block = {
		c: function create() {
			form = element("form");
			fieldset5 = element("fieldset");
			fieldset0 = element("fieldset");
			input0 = element("input");
			t0 = space();
			fieldset1 = element("fieldset");
			input1 = element("input");
			t1 = space();
			fieldset2 = element("fieldset");
			textarea = element("textarea");
			t2 = space();
			fieldset3 = element("fieldset");
			input2 = element("input");
			t3 = space();
			fieldset4 = element("fieldset");
			input3 = element("input");
			t4 = space();
			button = element("button");
			t5 = text("Update Settings");
			this.h();
		},

		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", {}, false);
			var form_nodes = children(form);

			fieldset5 = claim_element(form_nodes, "FIELDSET", {}, false);
			var fieldset5_nodes = children(fieldset5);

			fieldset0 = claim_element(fieldset5_nodes, "FIELDSET", { class: true }, false);
			var fieldset0_nodes = children(fieldset0);

			input0 = claim_element(fieldset0_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach_dev);
			fieldset0_nodes.forEach(detach_dev);
			t0 = claim_space(fieldset5_nodes);

			fieldset1 = claim_element(fieldset5_nodes, "FIELDSET", { class: true }, false);
			var fieldset1_nodes = children(fieldset1);

			input1 = claim_element(fieldset1_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach_dev);
			fieldset1_nodes.forEach(detach_dev);
			t1 = claim_space(fieldset5_nodes);

			fieldset2 = claim_element(fieldset5_nodes, "FIELDSET", { class: true }, false);
			var fieldset2_nodes = children(fieldset2);

			textarea = claim_element(fieldset2_nodes, "TEXTAREA", { class: true, rows: true, placeholder: true }, false);
			var textarea_nodes = children(textarea);

			textarea_nodes.forEach(detach_dev);
			fieldset2_nodes.forEach(detach_dev);
			t2 = claim_space(fieldset5_nodes);

			fieldset3 = claim_element(fieldset5_nodes, "FIELDSET", { class: true }, false);
			var fieldset3_nodes = children(fieldset3);

			input2 = claim_element(fieldset3_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input2_nodes = children(input2);

			input2_nodes.forEach(detach_dev);
			fieldset3_nodes.forEach(detach_dev);
			t3 = claim_space(fieldset5_nodes);

			fieldset4 = claim_element(fieldset5_nodes, "FIELDSET", { class: true }, false);
			var fieldset4_nodes = children(fieldset4);

			input3 = claim_element(fieldset4_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input3_nodes = children(input3);

			input3_nodes.forEach(detach_dev);
			fieldset4_nodes.forEach(detach_dev);
			t4 = claim_space(fieldset5_nodes);

			button = claim_element(fieldset5_nodes, "BUTTON", { class: true, type: true, disabled: true }, false);
			var button_nodes = children(button);

			t5 = claim_text(button_nodes, "Update Settings");
			button_nodes.forEach(detach_dev);
			fieldset5_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "URL of profile picture");
			add_location(input0, file, 14, 3, 364);
			attr_dev(fieldset0, "class", "form-group");
			add_location(fieldset0, file, 13, 2, 331);
			attr_dev(input1, "class", "form-control form-control-lg");
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", "Username");
			add_location(input1, file, 18, 3, 511);
			attr_dev(fieldset1, "class", "form-group");
			add_location(fieldset1, file, 17, 2, 478);
			attr_dev(textarea, "class", "form-control form-control-lg");
			attr_dev(textarea, "rows", "8");
			attr_dev(textarea, "placeholder", "Short bio about you");
			add_location(textarea, file, 22, 3, 663);
			attr_dev(fieldset2, "class", "form-group");
			add_location(fieldset2, file, 21, 2, 630);
			attr_dev(input2, "class", "form-control form-control-lg");
			attr_dev(input2, "type", "email");
			attr_dev(input2, "placeholder", "Email");
			add_location(input2, file, 26, 3, 822);
			attr_dev(fieldset3, "class", "form-group");
			add_location(fieldset3, file, 25, 2, 789);
			attr_dev(input3, "class", "form-control form-control-lg");
			attr_dev(input3, "type", "password");
			attr_dev(input3, "placeholder", "New Password");
			add_location(input3, file, 30, 3, 969);
			attr_dev(fieldset4, "class", "form-group");
			add_location(fieldset4, file, 29, 2, 936);
			attr_dev(button, "class", "btn btn-lg btn-primary pull-xs-right");
			attr_dev(button, "type", "submit");
			button.disabled = ctx.inProgress;
			add_location(button, file, 33, 2, 1096);
			add_location(fieldset5, file, 12, 1, 318);
			add_location(form, file, 11, 0, 274);

			dispose = [
				listen_dev(input0, "input", ctx.input0_input_handler),
				listen_dev(input1, "input", ctx.input1_input_handler),
				listen_dev(textarea, "input", ctx.textarea_input_handler),
				listen_dev(input2, "input", ctx.input2_input_handler),
				listen_dev(input3, "input", ctx.input3_input_handler),
				listen_dev(form, "submit", prevent_default(ctx.submit), false, true)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, fieldset5);
			append_dev(fieldset5, fieldset0);
			append_dev(fieldset0, input0);

			set_input_value(input0, ctx.image);

			append_dev(fieldset5, t0);
			append_dev(fieldset5, fieldset1);
			append_dev(fieldset1, input1);

			set_input_value(input1, ctx.username);

			append_dev(fieldset5, t1);
			append_dev(fieldset5, fieldset2);
			append_dev(fieldset2, textarea);

			set_input_value(textarea, ctx.bio);

			append_dev(fieldset5, t2);
			append_dev(fieldset5, fieldset3);
			append_dev(fieldset3, input2);

			set_input_value(input2, ctx.email);

			append_dev(fieldset5, t3);
			append_dev(fieldset5, fieldset4);
			append_dev(fieldset4, input3);

			set_input_value(input3, ctx.password);

			append_dev(fieldset5, t4);
			append_dev(fieldset5, button);
			append_dev(button, t5);
		},

		p: function update(changed, ctx) {
			if (changed.image && (input0.value !== ctx.image)) set_input_value(input0, ctx.image);
			if (changed.username && (input1.value !== ctx.username)) set_input_value(input1, ctx.username);
			if (changed.bio) set_input_value(textarea, ctx.bio);
			if (changed.email && (input2.value !== ctx.email)) set_input_value(input2, ctx.email);
			if (changed.password && (input3.value !== ctx.password)) set_input_value(input3, ctx.password);

			if (changed.inProgress) {
				prop_dev(button, "disabled", ctx.inProgress);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(form);
			}

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { inProgress, image, username, bio, email, password = '' } = $$props;
	const dispatch = createEventDispatcher();

	function submit(event) {
		dispatch('save', { image, username, bio, email, password });
	}

	const writable_props = ['inProgress', 'image', 'username', 'bio', 'email', 'password'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<SettingsForm> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		image = this.value;
		$$invalidate('image', image);
	}

	function input1_input_handler() {
		username = this.value;
		$$invalidate('username', username);
	}

	function textarea_input_handler() {
		bio = this.value;
		$$invalidate('bio', bio);
	}

	function input2_input_handler() {
		email = this.value;
		$$invalidate('email', email);
	}

	function input3_input_handler() {
		password = this.value;
		$$invalidate('password', password);
	}

	$$self.$set = $$props => {
		if ('inProgress' in $$props) $$invalidate('inProgress', inProgress = $$props.inProgress);
		if ('image' in $$props) $$invalidate('image', image = $$props.image);
		if ('username' in $$props) $$invalidate('username', username = $$props.username);
		if ('bio' in $$props) $$invalidate('bio', bio = $$props.bio);
		if ('email' in $$props) $$invalidate('email', email = $$props.email);
		if ('password' in $$props) $$invalidate('password', password = $$props.password);
	};

	$$self.$capture_state = () => {
		return { inProgress, image, username, bio, email, password };
	};

	$$self.$inject_state = $$props => {
		if ('inProgress' in $$props) $$invalidate('inProgress', inProgress = $$props.inProgress);
		if ('image' in $$props) $$invalidate('image', image = $$props.image);
		if ('username' in $$props) $$invalidate('username', username = $$props.username);
		if ('bio' in $$props) $$invalidate('bio', bio = $$props.bio);
		if ('email' in $$props) $$invalidate('email', email = $$props.email);
		if ('password' in $$props) $$invalidate('password', password = $$props.password);
	};

	return {
		inProgress,
		image,
		username,
		bio,
		email,
		password,
		submit,
		input0_input_handler,
		input1_input_handler,
		textarea_input_handler,
		input2_input_handler,
		input3_input_handler
	};
}

class SettingsForm extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["inProgress", "image", "username", "bio", "email", "password"]);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "SettingsForm", options, id: create_fragment.name });

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.inProgress === undefined && !('inProgress' in props)) {
			console.warn("<SettingsForm> was created without expected prop 'inProgress'");
		}
		if (ctx.image === undefined && !('image' in props)) {
			console.warn("<SettingsForm> was created without expected prop 'image'");
		}
		if (ctx.username === undefined && !('username' in props)) {
			console.warn("<SettingsForm> was created without expected prop 'username'");
		}
		if (ctx.bio === undefined && !('bio' in props)) {
			console.warn("<SettingsForm> was created without expected prop 'bio'");
		}
		if (ctx.email === undefined && !('email' in props)) {
			console.warn("<SettingsForm> was created without expected prop 'email'");
		}
	}

	get inProgress() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inProgress(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get image() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set image(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get username() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set username(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bio() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bio(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get email() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set email(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get password() {
		throw new Error("<SettingsForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set password(value) {
		throw new Error("<SettingsForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/settings/index.svelte generated by Svelte v3.12.1 */

const file$1 = "src/routes/settings/index.svelte";

function create_fragment$1(ctx) {
	var t0, div3, div2, div1, div0, h1, t1, t2, t3, t4, hr, t5, button, t6, current, dispose;

	var listerrors = new ListErrors({
		props: { errors: ctx.errors },
		$$inline: true
	});

	var settingsform_spread_levels = [
		ctx.$session.user,
		{ inProgress: ctx.inProgress }
	];

	let settingsform_props = {};
	for (var i = 0; i < settingsform_spread_levels.length; i += 1) {
		settingsform_props = assign(settingsform_props, settingsform_spread_levels[i]);
	}
	var settingsform = new SettingsForm({
		props: settingsform_props,
		$$inline: true
	});
	settingsform.$on("save", ctx.save);

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t1 = text("Your Settings");
			t2 = space();
			listerrors.$$.fragment.c();
			t3 = space();
			settingsform.$$.fragment.c();
			t4 = space();
			hr = element("hr");
			t5 = space();
			button = element("button");
			t6 = text("Or click here to logout.");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_space(nodes);

			div3 = claim_element(nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			h1 = claim_element(div0_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, "Your Settings");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			listerrors.$$.fragment.l(div0_nodes);
			t3 = claim_space(div0_nodes);
			settingsform.$$.fragment.l(div0_nodes);
			t4 = claim_space(div0_nodes);

			hr = claim_element(div0_nodes, "HR", {}, false);
			var hr_nodes = children(hr);

			hr_nodes.forEach(detach_dev);
			t5 = claim_space(div0_nodes);

			button = claim_element(div0_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t6 = claim_text(button_nodes, "Or click here to logout.");
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			document.title = "Settings • Conduit";
			attr_dev(h1, "class", "text-xs-center");
			add_location(h1, file$1, 38, 4, 785);
			add_location(hr, file$1, 44, 4, 932);
			attr_dev(button, "class", "btn btn-outline-danger");
			add_location(button, file$1, 46, 4, 944);
			attr_dev(div0, "class", "col-md-6 offset-md-3 col-xs-12");
			add_location(div0, file$1, 36, 3, 735);
			attr_dev(div1, "class", "row");
			add_location(div1, file$1, 35, 2, 714);
			attr_dev(div2, "class", "container page");
			add_location(div2, file$1, 34, 1, 683);
			attr_dev(div3, "class", "settings-page");
			add_location(div3, file$1, 33, 0, 654);
			dispose = listen_dev(button, "click", ctx.logout);
		},

		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(div0, t2);
			mount_component(listerrors, div0, null);
			append_dev(div0, t3);
			mount_component(settingsform, div0, null);
			append_dev(div0, t4);
			append_dev(div0, hr);
			append_dev(div0, t5);
			append_dev(div0, button);
			append_dev(button, t6);
			current = true;
		},

		p: function update(changed, ctx) {
			var listerrors_changes = {};
			if (changed.errors) listerrors_changes.errors = ctx.errors;
			listerrors.$set(listerrors_changes);

			var settingsform_changes = (changed.$session || changed.inProgress) ? get_spread_update(settingsform_spread_levels, [
									(changed.$session) && get_spread_object(ctx.$session.user),
			(changed.inProgress) && { inProgress: ctx.inProgress }
								]) : {};
			settingsform.$set(settingsform_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(listerrors.$$.fragment, local);

			transition_in(settingsform.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(listerrors.$$.fragment, local);
			transition_out(settingsform.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(div3);
			}

			destroy_component(listerrors);

			destroy_component(settingsform);

			dispose();
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment$1.name, type: "component", source: "", ctx });
	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $session;

	

	let inProgress;
	let errors;

	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	async function logout() {
		await post(`auth/logout`);
		set_store_value(session, $session.user = null, $session);
		goto('/');
	}

	async function save(event) {
		$$invalidate('inProgress', inProgress = true);

		const response = await post(`auth/save`, event.detail);

		$$invalidate('errors', errors = response.errors);
		if (response.user) set_store_value(session, $session.user = response.user, $session);

		$$invalidate('inProgress', inProgress = false);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ('inProgress' in $$props) $$invalidate('inProgress', inProgress = $$props.inProgress);
		if ('errors' in $$props) $$invalidate('errors', errors = $$props.errors);
		if ('$session' in $$props) session.set($session);
	};

	return {
		inProgress,
		errors,
		session,
		logout,
		save,
		$session
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment$1.name });
	}
}

export default Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYmYyMDQ0MjEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc2V0dGluZ3MvX1NldHRpbmdzRm9ybS5zdmVsdGUiLCIuLi8uLi8uLi9zcmMvcm91dGVzL3NldHRpbmdzL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXG5cdGV4cG9ydCBsZXQgaW5Qcm9ncmVzcywgaW1hZ2UsIHVzZXJuYW1lLCBiaW8sIGVtYWlsLCBwYXNzd29yZCA9ICcnO1xuXHRjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG5cdGZ1bmN0aW9uIHN1Ym1pdChldmVudCkge1xuXHRcdGRpc3BhdGNoKCdzYXZlJywgeyBpbWFnZSwgdXNlcm5hbWUsIGJpbywgZW1haWwsIHBhc3N3b3JkIH0pO1xuXHR9XG48L3NjcmlwdD5cblxuPGZvcm0gb246c3VibWl0fHByZXZlbnREZWZhdWx0PSd7c3VibWl0fSc+XG5cdDxmaWVsZHNldD5cblx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiVVJMIG9mIHByb2ZpbGUgcGljdHVyZVwiIGJpbmQ6dmFsdWU9e2ltYWdlfT5cblx0XHQ8L2ZpZWxkc2V0PlxuXG5cdFx0PGZpZWxkc2V0IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0PGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZ1wiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJVc2VybmFtZVwiIGJpbmQ6dmFsdWU9e3VzZXJuYW1lfT5cblx0XHQ8L2ZpZWxkc2V0PlxuXG5cdFx0PGZpZWxkc2V0IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuXHRcdFx0PHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZ1wiIHJvd3M9XCI4XCIgcGxhY2Vob2xkZXI9XCJTaG9ydCBiaW8gYWJvdXQgeW91XCIgYmluZDp2YWx1ZT17YmlvfS8+XG5cdFx0PC9maWVsZHNldD5cblxuXHRcdDxmaWVsZHNldCBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cblx0XHRcdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIiB0eXBlPVwiZW1haWxcIiBwbGFjZWhvbGRlcj1cIkVtYWlsXCIgYmluZDp2YWx1ZT17ZW1haWx9PlxuXHRcdDwvZmllbGRzZXQ+XG5cblx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLWxnXCIgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJOZXcgUGFzc3dvcmRcIiBiaW5kOnZhbHVlPXtwYXNzd29yZH0+XG5cdFx0PC9maWVsZHNldD5cblxuXHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1wcmltYXJ5IHB1bGwteHMtcmlnaHRcIiB0eXBlPVwic3VibWl0XCIgZGlzYWJsZWQ9e2luUHJvZ3Jlc3N9PlxuXHRcdFx0VXBkYXRlIFNldHRpbmdzXG5cdFx0PC9idXR0b24+XG5cdDwvZmllbGRzZXQ+XG48L2Zvcm0+IiwiPHNjcmlwdD5cblx0aW1wb3J0IHsgZ290bywgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnO1xuXHRpbXBvcnQgTGlzdEVycm9ycyBmcm9tICcuLi9fY29tcG9uZW50cy9MaXN0RXJyb3JzLnN2ZWx0ZSc7XG5cdGltcG9ydCBTZXR0aW5nc0Zvcm0gZnJvbSAnLi9fU2V0dGluZ3NGb3JtLnN2ZWx0ZSc7XG5cdGltcG9ydCB7IHBvc3QgfSBmcm9tICd1dGlscy5qcyc7XG5cblx0bGV0IGluUHJvZ3Jlc3M7XG5cdGxldCBlcnJvcnM7XG5cblx0Y29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKTtcblxuXHRhc3luYyBmdW5jdGlvbiBsb2dvdXQoKSB7XG5cdFx0YXdhaXQgcG9zdChgYXV0aC9sb2dvdXRgKTtcblx0XHQkc2Vzc2lvbi51c2VyID0gbnVsbDtcblx0XHRnb3RvKCcvJyk7XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBzYXZlKGV2ZW50KSB7XG5cdFx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHBvc3QoYGF1dGgvc2F2ZWAsIGV2ZW50LmRldGFpbCk7XG5cblx0XHRlcnJvcnMgPSByZXNwb25zZS5lcnJvcnM7XG5cdFx0aWYgKHJlc3BvbnNlLnVzZXIpICRzZXNzaW9uLnVzZXIgPSByZXNwb25zZS51c2VyO1xuXG5cdFx0aW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHR9XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+U2V0dGluZ3Mg4oCiIENvbmR1aXQ8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGRpdiBjbGFzcz1cInNldHRpbmdzLXBhZ2VcIj5cblx0PGRpdiBjbGFzcz1cImNvbnRhaW5lciBwYWdlXCI+XG5cdFx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC02IG9mZnNldC1tZC0zIGNvbC14cy0xMlwiPlxuXG5cdFx0XHRcdDxoMSBjbGFzcz1cInRleHQteHMtY2VudGVyXCI+WW91ciBTZXR0aW5nczwvaDE+XG5cblx0XHRcdFx0PExpc3RFcnJvcnMge2Vycm9yc30vPlxuXG5cdFx0XHRcdDxTZXR0aW5nc0Zvcm0gb246c2F2ZT17c2F2ZX0gey4uLiRzZXNzaW9uLnVzZXJ9IHtpblByb2dyZXNzfS8+XG5cblx0XHRcdFx0PGhyIC8+XG5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1kYW5nZXJcIiBvbjpjbGljaz17bG9nb3V0fT5cblx0XHRcdFx0XHRPciBjbGljayBoZXJlIHRvIGxvZ291dC5cblx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG48L2Rpdj4iXSwibmFtZXMiOlsic3RvcmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQWlDK0UsVUFBVTs7Ozs7Ozs7Ozs7bURBdEJ4RCxNQUFNOzs7Ozs7Ozs7OytCQUdxRCxLQUFLOzs7Ozs7K0JBSUgsUUFBUTs7Ozs7O2lDQUlHLEdBQUc7Ozs7OzsrQkFJaEIsS0FBSzs7Ozs7OytCQUlLLFFBQVE7Ozs7Ozs7OzhDQWhCbEIsS0FBSywrQkFBTCxLQUFLO2lEQUlILFFBQVEsK0JBQVIsUUFBUTtrREFJRyxHQUFHOzhDQUloQixLQUFLLCtCQUFMLEtBQUs7aURBSUssUUFBUSwrQkFBUixRQUFROzs7cUNBRy9CLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBOUJqRixNQUFJLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxHQUFHLGNBQUUsQ0FBQztDQUNsRSxNQUFNLFFBQVEsR0FBRyxxQkFBcUIsRUFBRSxDQUFDOztDQUV6QyxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUU7RUFDdEIsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0VBQzVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1QkNnQ2UsTUFBTTs7Ozs7TUFFYyxRQUFRLENBQUMsSUFBSTtvQkFBRyxVQUFVOzs7Ozs7Ozs7Ozs4QkFBcEMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0FJc0IsTUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1REFOMUMsTUFBTTs7OztxREFFYyxRQUFRLENBQUMsSUFBSTs2Q0FBRyxVQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FwQzlELElBQUksVUFBVSxDQUFDO0NBQ2YsSUFBSSxNQUFNLENBQUM7O0NBRVgsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHQSxRQUFNLG9KQUFFLENBQUM7O0NBRTdCLGVBQWUsTUFBTSxHQUFHO0VBQ3ZCLE1BQU0sSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzsyQkFDMUIsUUFBUSxDQUFDLElBQUksR0FBRyxlQUFJLENBQUM7RUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ1Y7O0NBRUQsZUFBZSxJQUFJLENBQUMsS0FBSyxFQUFFOzZCQUMxQixVQUFVLEdBQUcsS0FBSSxDQUFDOztFQUVsQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzs7eUJBRXZELE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTSxDQUFDO0VBQ3pCLElBQUksUUFBUSxDQUFDLElBQUksMkJBQUUsUUFBUSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsZUFBSSxDQUFDOzs2QkFFakQsVUFBVSxHQUFHLE1BQUssQ0FBQztFQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
