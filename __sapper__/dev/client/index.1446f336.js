import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_store, c as component_subscribe, a as space, e as element, t as text, j as claim_space, b as claim_element, f as children, g as claim_text, h as detach_dev, k as attr_dev, l as add_location, K as listen_dev, U as prevent_default, o as insert_dev, p as append_dev, u as mount_component, V as set_input_value, y as transition_in, z as transition_out, A as destroy_component, W as run_all, X as set_store_value } from './chunk.6414288c.js';
import { a as stores$1, g as goto } from './chunk.78ecd290.js';
import { L as ListErrors } from './chunk.9e3350ae.js';
import { p as post } from './chunk.57407f11.js';

/* src/routes/register/index.svelte generated by Svelte v3.12.1 */

const file = "src/routes/register/index.svelte";

function create_fragment(ctx) {
	var t0, div3, div2, div1, div0, h1, t1, t2, p, a, t3, t4, t5, form, fieldset0, input0, t6, fieldset1, input1, t7, fieldset2, input2, t8, button, t9, current, dispose;

	var listerrors = new ListErrors({
		props: { errors: ctx.errors },
		$$inline: true
	});

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t1 = text("Sign up");
			t2 = space();
			p = element("p");
			a = element("a");
			t3 = text("Have an account?");
			t4 = space();
			listerrors.$$.fragment.c();
			t5 = space();
			form = element("form");
			fieldset0 = element("fieldset");
			input0 = element("input");
			t6 = space();
			fieldset1 = element("fieldset");
			input1 = element("input");
			t7 = space();
			fieldset2 = element("fieldset");
			input2 = element("input");
			t8 = space();
			button = element("button");
			t9 = text("Sign up");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_space(nodes);

			div3 = claim_element(nodes, "DIV", { class: true }, false);
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", { class: true }, false);
			var div2_nodes = children(div2);

			div1 = claim_element(div2_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			h1 = claim_element(div0_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, "Sign up");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			p = claim_element(div0_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			a = claim_element(p_nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t3 = claim_text(a_nodes, "Have an account?");
			a_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			listerrors.$$.fragment.l(div0_nodes);
			t5 = claim_space(div0_nodes);

			form = claim_element(div0_nodes, "FORM", {}, false);
			var form_nodes = children(form);

			fieldset0 = claim_element(form_nodes, "FIELDSET", { class: true }, false);
			var fieldset0_nodes = children(fieldset0);

			input0 = claim_element(fieldset0_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input0_nodes = children(input0);

			input0_nodes.forEach(detach_dev);
			fieldset0_nodes.forEach(detach_dev);
			t6 = claim_space(form_nodes);

			fieldset1 = claim_element(form_nodes, "FIELDSET", { class: true }, false);
			var fieldset1_nodes = children(fieldset1);

			input1 = claim_element(fieldset1_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input1_nodes = children(input1);

			input1_nodes.forEach(detach_dev);
			fieldset1_nodes.forEach(detach_dev);
			t7 = claim_space(form_nodes);

			fieldset2 = claim_element(form_nodes, "FIELDSET", { class: true }, false);
			var fieldset2_nodes = children(fieldset2);

			input2 = claim_element(fieldset2_nodes, "INPUT", { class: true, type: true, placeholder: true }, false);
			var input2_nodes = children(input2);

			input2_nodes.forEach(detach_dev);
			fieldset2_nodes.forEach(detach_dev);
			t8 = claim_space(form_nodes);

			button = claim_element(form_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t9 = claim_text(button_nodes, "Sign up");
			button_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},

		h: function hydrate() {
			document.title = "Sign up â€¢ Conduit";
			attr_dev(h1, "class", "text-xs-center");
			add_location(h1, file, 33, 4, 711);
			attr_dev(a, "href", "/login");
			add_location(a, file, 35, 5, 787);
			attr_dev(p, "class", "text-xs-center");
			add_location(p, file, 34, 4, 755);
			attr_dev(input0, "class", "form-control form-control-lg");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Your Name");
			add_location(input0, file, 42, 6, 949);
			attr_dev(fieldset0, "class", "form-group");
			add_location(fieldset0, file, 41, 5, 913);
			attr_dev(input1, "class", "form-control form-control-lg");
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", "Email");
			add_location(input1, file, 45, 6, 1110);
			attr_dev(fieldset1, "class", "form-group");
			add_location(fieldset1, file, 44, 5, 1074);
			attr_dev(input2, "class", "form-control form-control-lg");
			attr_dev(input2, "type", "password");
			attr_dev(input2, "placeholder", "Password");
			add_location(input2, file, 48, 6, 1264);
			attr_dev(fieldset2, "class", "form-group");
			add_location(fieldset2, file, 47, 5, 1228);
			attr_dev(button, "class", "btn btn-lg btn-primary pull-xs-right");
			add_location(button, file, 50, 5, 1392);
			add_location(form, file, 40, 4, 867);
			attr_dev(div0, "class", "col-md-6 offset-md-3 col-xs-12");
			add_location(div0, file, 32, 3, 662);
			attr_dev(div1, "class", "row");
			add_location(div1, file, 31, 2, 641);
			attr_dev(div2, "class", "container page");
			add_location(div2, file, 30, 1, 610);
			attr_dev(div3, "class", "auth-page");
			add_location(div3, file, 29, 0, 585);

			dispose = [
				listen_dev(input0, "input", ctx.input0_input_handler),
				listen_dev(input1, "input", ctx.input1_input_handler),
				listen_dev(input2, "input", ctx.input2_input_handler),
				listen_dev(form, "submit", prevent_default(ctx.submit), false, true)
			];
		},

		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(div0, t2);
			append_dev(div0, p);
			append_dev(p, a);
			append_dev(a, t3);
			append_dev(div0, t4);
			mount_component(listerrors, div0, null);
			append_dev(div0, t5);
			append_dev(div0, form);
			append_dev(form, fieldset0);
			append_dev(fieldset0, input0);

			set_input_value(input0, ctx.username);

			append_dev(form, t6);
			append_dev(form, fieldset1);
			append_dev(fieldset1, input1);

			set_input_value(input1, ctx.email);

			append_dev(form, t7);
			append_dev(form, fieldset2);
			append_dev(fieldset2, input2);

			set_input_value(input2, ctx.password);

			append_dev(form, t8);
			append_dev(form, button);
			append_dev(button, t9);
			current = true;
		},

		p: function update(changed, ctx) {
			var listerrors_changes = {};
			if (changed.errors) listerrors_changes.errors = ctx.errors;
			listerrors.$set(listerrors_changes);

			if (changed.username && (input0.value !== ctx.username)) set_input_value(input0, ctx.username);
			if (changed.email && (input1.value !== ctx.email)) set_input_value(input1, ctx.email);
			if (changed.password && (input2.value !== ctx.password)) set_input_value(input2, ctx.password);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(listerrors.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(listerrors.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(div3);
			}

			destroy_component(listerrors);

			run_all(dispose);
		}
	};
	dispatch_dev("SvelteRegisterBlock", { block, id: create_fragment.name, type: "component", source: "", ctx });
	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $session;

	

	const { session } = stores$1(); validate_store(session, 'session'); component_subscribe($$self, session, $$value => { $session = $$value; $$invalidate('$session', $session); });

	let username = '';
	let email = '';
	let password = '';
	let errors = null;

	async function submit(event) {
		const response = await post(`auth/register`, { username, email, password });

		// TODO handle network errors
		$$invalidate('errors', errors = response.errors);

		if (response.user) {
			set_store_value(session, $session.user = response.user, $session);
			goto('/');
		}
	}

	function input0_input_handler() {
		username = this.value;
		$$invalidate('username', username);
	}

	function input1_input_handler() {
		email = this.value;
		$$invalidate('email', email);
	}

	function input2_input_handler() {
		password = this.value;
		$$invalidate('password', password);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ('username' in $$props) $$invalidate('username', username = $$props.username);
		if ('email' in $$props) $$invalidate('email', email = $$props.email);
		if ('password' in $$props) $$invalidate('password', password = $$props.password);
		if ('errors' in $$props) $$invalidate('errors', errors = $$props.errors);
		if ('$session' in $$props) session.set($session);
	};

	return {
		session,
		username,
		email,
		password,
		errors,
		submit,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
		dispatch_dev("SvelteRegisterComponent", { component: this, tagName: "Index", options, id: create_fragment.name });
	}
}

export default Index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMTQ0NmYzMzYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcmVnaXN0ZXIvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5cdGltcG9ydCB7IGdvdG8sIHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJztcblx0aW1wb3J0IExpc3RFcnJvcnMgZnJvbSAnLi4vX2NvbXBvbmVudHMvTGlzdEVycm9ycy5zdmVsdGUnO1xuXHRpbXBvcnQgeyBwb3N0IH0gZnJvbSAndXRpbHMuanMnO1xuXG5cdGNvbnN0IHsgc2Vzc2lvbiB9ID0gc3RvcmVzKCk7XG5cblx0bGV0IHVzZXJuYW1lID0gJyc7XG5cdGxldCBlbWFpbCA9ICcnO1xuXHRsZXQgcGFzc3dvcmQgPSAnJztcblx0bGV0IGVycm9ycyA9IG51bGw7XG5cblx0YXN5bmMgZnVuY3Rpb24gc3VibWl0KGV2ZW50KSB7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0KGBhdXRoL3JlZ2lzdGVyYCwgeyB1c2VybmFtZSwgZW1haWwsIHBhc3N3b3JkIH0pO1xuXG5cdFx0Ly8gVE9ETyBoYW5kbGUgbmV0d29yayBlcnJvcnNcblx0XHRlcnJvcnMgPSByZXNwb25zZS5lcnJvcnM7XG5cblx0XHRpZiAocmVzcG9uc2UudXNlcikge1xuXHRcdFx0JHNlc3Npb24udXNlciA9IHJlc3BvbnNlLnVzZXI7XG5cdFx0XHRnb3RvKCcvJyk7XG5cdFx0fVxuXHR9XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuXHQ8dGl0bGU+U2lnbiB1cCDigKIgQ29uZHVpdDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48ZGl2IGNsYXNzPVwiYXV0aC1wYWdlXCI+XG5cdDxkaXYgY2xhc3M9XCJjb250YWluZXIgcGFnZVwiPlxuXHRcdDxkaXYgY2xhc3M9XCJyb3dcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtNiBvZmZzZXQtbWQtMyBjb2wteHMtMTJcIj5cblx0XHRcdFx0PGgxIGNsYXNzPVwidGV4dC14cy1jZW50ZXJcIj5TaWduIHVwPC9oMT5cblx0XHRcdFx0PHAgY2xhc3M9XCJ0ZXh0LXhzLWNlbnRlclwiPlxuXHRcdFx0XHRcdDxhIGhyZWY9XCIvbG9naW5cIj5IYXZlIGFuIGFjY291bnQ/PC9hPlxuXHRcdFx0XHQ8L3A+XG5cblx0XHRcdFx0PExpc3RFcnJvcnMge2Vycm9yc30vPlxuXG5cdFx0XHRcdDxmb3JtIG9uOnN1Ym1pdHxwcmV2ZW50RGVmYXVsdD17c3VibWl0fT5cblx0XHRcdFx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLWxnXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIllvdXIgTmFtZVwiIGJpbmQ6dmFsdWU9e3VzZXJuYW1lfT5cblx0XHRcdFx0XHQ8L2ZpZWxkc2V0PlxuXHRcdFx0XHRcdDxmaWVsZHNldCBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cblx0XHRcdFx0XHRcdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW1haWxcIiBiaW5kOnZhbHVlPXtlbWFpbH0+XG5cdFx0XHRcdFx0PC9maWVsZHNldD5cblx0XHRcdFx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHQ8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLWxnXCIgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIGJpbmQ6dmFsdWU9e3Bhc3N3b3JkfT5cblx0XHRcdFx0XHQ8L2ZpZWxkc2V0PlxuXHRcdFx0XHRcdDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1wcmltYXJ5IHB1bGwteHMtcmlnaHRcIj5cblx0XHRcdFx0XHRcdFNpZ24gdXBcblx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0PC9mb3JtPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC9kaXY+Il0sIm5hbWVzIjpbInN0b3JlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozt1QkFzQ2lCLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21EQUVhLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUV3RCxRQUFROzs7Ozs7K0JBR1osS0FBSzs7Ozs7OytCQUdFLFFBQVE7Ozs7Ozs7Ozs7dURBVjVGLE1BQU07OztpREFJMkUsUUFBUSwrQkFBUixRQUFROzhDQUdaLEtBQUssK0JBQUwsS0FBSztpREFHRSxRQUFRLCtCQUFSLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBM0M1RyxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUdBLFFBQU0sb0pBQUUsQ0FBQzs7Q0FFN0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0NBQ2xCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUNmLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNsQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7O0NBRWxCLGVBQWUsTUFBTSxDQUFDLEtBQUssRUFBRTtFQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDOzs7eUJBRzVFLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTSxDQUFDOztFQUV6QixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7NEJBQ2xCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGVBQUksQ0FBQztHQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDVjtFQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
